#!/bin/bash

#  The MIT License (MIT)
#
#  Copyright (c) 2018 Norsk Rikskringkasting AS. All rights reserved.
#
#  Permission is hereby granted, free of charge, to any person
#  obtaining a copy of this software and associated documentation
#  files (the "Software"), to deal in the Software without
#  restriction, including without limitation the rights to use, copy,
#  modify, merge, publish, distribute, sublicense, and/or sell copies
#  of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be
#  included in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
#  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
#  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#
#
#
# This script is meant to be used on multi-core machines from a single
# ssh session. Will start a number of processes running under nohup in
# the background.
#
# Set max_clients in the rc file to configure number of SCS processes
# to be started, typically equal to number of CPU cores.
#
# Set $start-file-number in the rc file to synchronize multiple
# machines running different input files (e.g. node 1: files 0-19,
# node 2: 20-39, node 3: 40-59).
#
# Support for multiple local IP addresses to spread traffic across
# bonded interfaces.

. scs-multirc

nprocesses=0
one_verbose_process=1
verbose=""

if [ -z $start_file_number ]; then
    fnumber=0
else
    fnumber=$start_file_number
fi

while [ $nprocesses -lt $max_clients ]; do
    if [ $one_verbose_process -eq 1 ]; then
        if [ $nprocesses -eq 0 ]; then
            verbose="-v";
        else
            verbose="";
        fi
    fi
    
    if [ $fnumber -lt 10 ]; then
        number="0"$fnumber
    else
        number=$fnumber
    fi

    if [ ! -z $local_ip_2 ]; then
        if ((fnumber % 2)) ; then
            bind_ip="-b $local_ip_1"
        else
            bind_ip="-b $local_ip_2"
        fi
    fi

    echo "Connecting client $fnumber via $bind_ip"

    nohup nodejs --max-old-space-size=4096 scs.js $bind_ip $verbose --bw biased --dynamic -d 10 -n 2 -h $streamhost -f $inputdir"/splitfile$number" --resume-state .scs-$number.resume "$@" > /tmp/scs-$number.out &

    ((nprocesses++));
    ((fnumber++));
done
